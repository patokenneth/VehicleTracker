// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VehicleTracker.DataContext;

namespace VehicleTracker.Migrations
{
    [DbContext(typeof(AppUserContext))]
    [Migration("20220105124412_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("VehicleTracker.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Passwordsalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("password")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsAdmin = true,
                            Passwordsalt = new byte[] { 101, 82, 128, 52, 222, 60, 37, 178, 138, 78, 90, 254, 195, 19, 202, 173, 24, 9, 23, 16, 163, 78, 109, 188, 216, 41, 62, 31, 186, 197, 129, 76, 145, 12, 37, 80, 121, 101, 104, 247, 92, 55, 212, 4, 121, 176, 14, 167, 71, 131, 121, 145, 198, 12, 173, 152, 113, 187, 223, 168, 226, 166, 122, 191, 32, 53, 57, 154, 93, 217, 177, 88, 139, 71, 52, 77, 158, 142, 15, 224, 62, 83, 116, 79, 78, 188, 84, 241, 211, 90, 8, 58, 164, 14, 196, 250, 76, 105, 145, 118, 67, 201, 167, 39, 101, 176, 199, 109, 61, 237, 195, 65, 253, 233, 48, 3, 71, 153, 200, 242, 154, 149, 85, 51, 210, 178, 154, 135 },
                            Username = "Seven",
                            password = new byte[] { 212, 187, 36, 95, 47, 143, 192, 217, 83, 84, 131, 16, 43, 86, 130, 233, 28, 209, 228, 103, 203, 244, 66, 152, 6, 75, 155, 70, 220, 30, 127, 66, 134, 3, 36, 96, 164, 59, 142, 249, 123, 68, 202, 207, 5, 90, 32, 151, 220, 242, 51, 236, 215, 205, 92, 203, 202, 215, 176, 179, 238, 225, 37, 158 }
                        });
                });

            modelBuilder.Entity("VehicleTracker.Models.LocationHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Latitude")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Longitude")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleID");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("VehicleTracker.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("VehicleTracker.Models.LocationHistory", b =>
                {
                    b.HasOne("VehicleTracker.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });
#pragma warning restore 612, 618
        }
    }
}
