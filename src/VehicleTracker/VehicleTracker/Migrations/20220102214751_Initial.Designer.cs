// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VehicleTracker.DataContext;

namespace VehicleTracker.Migrations
{
    [DbContext(typeof(AppUserContext))]
    [Migration("20220102214751_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("VehicleTracker.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Passwordsalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("password")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsAdmin = true,
                            Passwordsalt = new byte[] { 147, 158, 202, 240, 241, 6, 46, 152, 54, 136, 206, 234, 225, 46, 123, 171, 151, 73, 22, 251, 255, 47, 81, 99, 51, 124, 240, 225, 203, 18, 0, 130, 61, 59, 223, 244, 85, 78, 117, 226, 207, 99, 108, 10, 217, 230, 50, 191, 230, 40, 193, 225, 151, 71, 148, 170, 159, 133, 205, 175, 103, 57, 132, 193, 240, 196, 173, 137, 54, 95, 239, 142, 177, 160, 249, 212, 212, 50, 166, 101, 47, 39, 74, 100, 94, 255, 190, 138, 222, 222, 237, 78, 210, 14, 166, 248, 226, 196, 189, 66, 23, 229, 54, 234, 209, 76, 130, 242, 146, 231, 146, 185, 195, 16, 44, 41, 90, 253, 12, 172, 86, 84, 223, 147, 110, 106, 73, 79 },
                            Username = "Seven",
                            password = new byte[] { 79, 197, 206, 245, 148, 33, 232, 86, 94, 73, 93, 208, 89, 244, 53, 140, 92, 226, 228, 35, 159, 9, 180, 166, 94, 251, 103, 193, 140, 95, 95, 234, 21, 168, 94, 207, 27, 111, 105, 121, 126, 9, 230, 12, 191, 180, 149, 229, 128, 232, 51, 229, 66, 143, 74, 29, 73, 17, 28, 251, 17, 109, 79, 75 }
                        });
                });

            modelBuilder.Entity("VehicleTracker.Models.LocationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleID");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("VehicleTracker.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("VehicleTracker.Models.LocationDetail", b =>
                {
                    b.HasOne("VehicleTracker.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });
#pragma warning restore 612, 618
        }
    }
}
