// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VehicleTracker.DataContext;

namespace VehicleTracker.Migrations
{
    [DbContext(typeof(AppUserContext))]
    [Migration("20220105123312_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("VehicleTracker.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Passwordsalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("password")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsAdmin = true,
                            Passwordsalt = new byte[] { 181, 212, 27, 206, 250, 53, 225, 154, 22, 75, 225, 136, 179, 148, 244, 2, 148, 38, 61, 245, 62, 157, 251, 46, 245, 241, 251, 158, 240, 99, 192, 214, 239, 164, 86, 188, 194, 5, 130, 64, 86, 131, 218, 39, 101, 185, 57, 148, 42, 226, 217, 196, 85, 86, 97, 120, 150, 81, 93, 0, 201, 251, 38, 96, 68, 69, 229, 122, 175, 185, 194, 177, 152, 224, 221, 233, 180, 192, 70, 163, 14, 206, 184, 94, 94, 97, 8, 48, 52, 173, 4, 33, 141, 139, 173, 63, 88, 212, 136, 145, 219, 239, 120, 64, 210, 119, 17, 120, 61, 85, 232, 218, 83, 69, 92, 155, 252, 99, 65, 175, 238, 114, 209, 72, 150, 184, 59, 110 },
                            Username = "Seven",
                            password = new byte[] { 221, 126, 64, 109, 69, 93, 154, 180, 5, 196, 159, 101, 97, 65, 214, 74, 3, 149, 144, 97, 155, 24, 171, 113, 208, 75, 36, 154, 74, 90, 197, 184, 97, 177, 173, 106, 208, 44, 146, 71, 117, 157, 98, 8, 78, 31, 226, 216, 102, 46, 212, 74, 141, 165, 226, 3, 109, 110, 143, 58, 232, 224, 7, 17 }
                        });
                });

            modelBuilder.Entity("VehicleTracker.Models.LocationHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Latitude")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Longitude")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleID");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("VehicleTracker.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("VehicleTracker.Models.LocationHistory", b =>
                {
                    b.HasOne("VehicleTracker.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });
#pragma warning restore 612, 618
        }
    }
}
