// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VehicleTracker.DataContext;

namespace VehicleTracker.Migrations
{
    [DbContext(typeof(AppUserContext))]
    [Migration("20220103151435_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("VehicleTracker.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Passwordsalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("password")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsAdmin = true,
                            Passwordsalt = new byte[] { 230, 143, 136, 1, 21, 5, 9, 159, 248, 87, 16, 174, 247, 186, 65, 46, 238, 132, 223, 127, 215, 218, 14, 167, 27, 202, 44, 26, 37, 0, 161, 186, 16, 246, 166, 198, 202, 108, 47, 94, 151, 120, 237, 141, 223, 11, 103, 61, 51, 118, 186, 133, 132, 248, 61, 34, 140, 75, 84, 166, 234, 253, 172, 19, 160, 87, 228, 121, 217, 175, 72, 240, 123, 220, 37, 32, 69, 136, 207, 105, 249, 137, 107, 7, 246, 4, 166, 30, 209, 23, 129, 213, 24, 120, 17, 32, 40, 155, 228, 71, 50, 193, 200, 111, 172, 232, 171, 29, 252, 86, 186, 157, 65, 171, 81, 230, 151, 226, 32, 37, 126, 22, 56, 169, 137, 39, 36, 195 },
                            Username = "Seven",
                            password = new byte[] { 201, 5, 19, 17, 45, 222, 202, 229, 95, 107, 118, 64, 18, 46, 132, 204, 160, 3, 70, 30, 243, 57, 40, 1, 133, 32, 172, 236, 60, 174, 113, 132, 18, 93, 121, 74, 236, 237, 47, 41, 255, 180, 160, 116, 234, 249, 66, 215, 246, 131, 19, 244, 216, 97, 89, 20, 9, 87, 117, 237, 238, 140, 225, 213 }
                        });
                });

            modelBuilder.Entity("VehicleTracker.Models.LocationHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleID");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("VehicleTracker.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("VehicleTracker.Models.LocationHistory", b =>
                {
                    b.HasOne("VehicleTracker.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });
#pragma warning restore 612, 618
        }
    }
}
